#include <RcppArmadillo.h>

using namespace arma;

// [[Rcpp::depends(RcppArmadillo)]]

// [[Rcpp::export]]
arma::uvec initDesign(const arma::mat& X, int design_size)
{
    // svd decomposition (dc -- divide and conquer is fastest and default)
    // use econ because we only need left side
    // I believe econ also, by default, gives nr by nc rather than nr by nr
    //
    // john: ffr, this speeds up calculation. If you look at R help page of
    // SVD, you'll see that the fewer singular vectors are computed, the faster
    mat U, V;
    vec S;
    svd_econ(U, S, V, X, "left");

    // rank of design matrix. sneaky way to round super-small numbers in S
    int xr = arma::rank(diagmat(S));

    // compute leverages
    vec lev = sum(U%U, 1);

    // find largest leverages
    // this sorting method is lame cause matching entries are ordered poorly
    uvec lInd = sort_index(lev, "descend");
    // only take xr points from the candidate set
    lInd.resize(xr);

    // fill design with randomly selected candidate points
    //
    // theres something funny with the first element of randi/randu
    // first element of randi is always 0 and the expected value of the first
    // element of a vector generated by randu appears to be neither constant
    // nor around .5 like it should be

    uvec rInd =  randi<uvec>(design_size-xr+1, distr_param(0,X.n_rows-1));
    rInd.shed_row(0);

    uvec indeces = join_cols(lInd, rInd);

    return indeces;
}
