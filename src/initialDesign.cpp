#include <RcppArmadillo.h>

using namespace arma;

int is_new(unsigned int prop, uvec vector);

// [[Rcpp::depends(RcppArmadillo)]]

// [[Rcpp::export]]
arma::uvec initDesign(const arma::mat& X, int design_size, int repeated)
{
    // svd decomposition (dc -- divide and conquer is fastest and default)
    // use econ because we only need left side
    // I believe econ also, by default, gives nr by nc rather than nr by nr
    //
    // john: ffr, this speeds up calculation. If you look at R help page of
    // SVD, you'll see that the fewer singular vectors are computed, the faster
    mat U, V;
    vec S;
    svd_econ(U, S, V, X, "left");

    // rank of design matrix. sneaky way to round super-small numbers in S
    int xr = arma::rank(diagmat(S));

    // compute leverages
    vec lev = sum(U%U, 1);

    // find largest leverages
    // this sorting method is lame cause matching entries are ordered poorly
    uvec lInd = sort_index(lev, "descend");

    // take first xr of highest leverage and randomize rest
    lInd.resize(xr);

    // fill design with randomly selected candidate points
    if (repeated)
    {
        // theres something funny with the first element of randi/randu
        // first element of randi is always 0 and the expected value of the first
        // element of a vector generated by randu appears to be neither constant
        // nor around .5 like it should be
        uvec rInd =  randi<uvec>(design_size-xr+1, distr_param(0,X.n_rows-1));
        rInd.shed_row(0);

        return join_cols(lInd, rInd);
    }
    else
    {
        uvec rInd(1);
        int i = xr;
        unsigned int prop;

        while (i < design_size)
        {
            // propose something between 0 and number of rows in x
            prop = (unsigned int) rand() % X.n_rows;

            // check if already proposed
            if (is_new(prop, lInd))
            {
                rInd(0) = prop;
                lInd = join_cols(lInd, rInd);
                ++i;
            }
        }

        return lInd;
    }
}

int is_new(unsigned int prop, uvec vector)
{
    int i;
    int isnew = 1;

    for (i=0; i<vector.n_rows; ++i)
    {
        if (prop == vector(i))
        {
            isnew = 0;
            i = vector.n_rows + 1;
        }
    }

    return isnew;
}

